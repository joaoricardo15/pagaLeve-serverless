service: pagaleve-serverless

plugins:
  - serverless-offline
  - serverless-plugin-webpack
  - serverless-aws-documentation

package:
  individually: true

provider:
  name: aws
  timeout: 10
  memorySize: 512
  region: us-east-1
  runtime: nodejs12.x
  versionFunctions: false
  stage: ${opt:stage, 'dev'}
  environment:
    # Api service
    API_PREFIX: ${self:service}-${self:provider.stage}

    # Sendgrid
    SENDGRID_API_URL: https://api.sendgrid.com/v3
    SENDGRID_API_TOKEN: ${file(./credentials/sendgrid.json):api_token}

    # Data bases
    CUSTOMERS_TABLE: ${self:provider.environment.API_PREFIX}-customers
    CUSTOMERS_PROFILES_TABLE: ${self:provider.environment.API_PREFIX}-customers-profiles

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["customersTable", "Arn" ] }
        - { "Fn::GetAtt": ["customersProfileTable", "Arn" ] }
    - Effect: Allow
      Action:
        - "logs:*"
      Resource: "*"

custom:
  documentation:
    api:
      info:
        version: "1"
        title: "PagaLeve Customers API"
        description: "PagaLeve microservice API for customers"
        termsOfService: "https://pagaleve.com"
        contact:
          name: "Jo√£o Cardoso"
          url: "https://www.linkedin.com/in/jo%C3%A3o"
          email: "joaoricardo15@hotmail.com"
        license:
          name: "Licensing"
          url: "https://pagaleve.com/home"
      authorizers:
        - name: "apiAuthorizer"
          description: "Authorizer for API requests"

    models:
      - name: "ErrorResponse"
        description: "Error payload"
        contentType: "application/json"
        schema: ${file(src/models/error.json)}
      - name: "SuccessResponse"
        description: "Success payload"
        contentType: "application/json"
        schema: ${file(src/models/success.json)}
      - name: "CreateCustomerModel"
        description: "Create customer model"
        contentType: "application/json"
        schema: ${file(src/models/createCustomer.json)}
      - name: "CustomerModel"
        description: "Customer model"
        contentType: "application/json"
        schema: ${file(src/models/customer.json)}

functions:
  # Customer resources
  customers-list:
    handler: src/endpoints/customers/list/index.handler
    events:
      - http:
          path: customers
          method: get
          cors: true
          authorizer: service-authorizer
          documentation:
            summary: "List customers"
            description: "List all customers"
            tags:
              - "Customers"
            requestHeaders:
              - name: "Authorization"
                description: "Auth credentials"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "This is how the response body looks like"
                responseModels:
                  "application/json": "SuccessResponse"
              - statusCode: "400"
                responseModels:
                  "application/json": "ErrorResponse"

  customers-post:
    handler: src/endpoints/customers/post/index.handler
    events:
      - http:
          path: customers
          method: post
          cors: true
          authorizer: service-authorizer
          documentation:
            summary: "Create customer"
            description: "Create a new customer"
            tags:
              - "Customers"
            requestHeaders:
              - name: "Authorization"
                description: "Auth credentials"
            requestBody:
              description: "Request body description"
            requestModels:
              "application/json": "CreateCustomerModel"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "This is how the response body looks like"
                responseModels:
                  "application/json": "SuccessResponse"
              - statusCode: "400"
                responseModels:
                  "application/json": "ErrorResponse"
  
  customers-delete:
    handler: src/endpoints/customers/delete/index.handler
    events:
      - http:
          path: customers/{customerId}
          method: delete
          cors: true
          authorizer: service-authorizer
          documentation:
            summary: "Delete customer"
            description: "Delete a specified customer by customerId"
            tags:
              - "Customers"
            requestHeaders:
              - name: "Authorization"
                description: "Auth credentials"
            pathParams:
              - name: "customerId"
                description: "ID of the customer you want to delete"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "This is how the response body looks like"
                responseModels:
                  "application/json": "SuccessResponse"
              - statusCode: "400"
                responseModels:
                  "application/json": "ErrorResponse"

  customers-get:
    handler: src/endpoints/customers/get/index.handler
    events:
      - http:
          path: customers/{customerId}
          method: get
          cors: true
          authorizer: service-authorizer
          documentation:
            summary: "Get customer"
            description: "Get a specified customer by customerId"
            tags:
              - "Customers"
            requestHeaders:
              - name: "Authorization"
                description: "Auth credentials"
            pathParams:
              - name: "customerId"
                description: "ID of the customer you want to get"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "This is how the response body looks like"
                responseModels:
                  "application/json": "SuccessResponse"
              - statusCode: "400"
                responseModels:
                  "application/json": "ErrorResponse"

  customers-search:
    handler: src/endpoints/customers/search/index.handler
    events:
      - http:
          path: customers/search/{queryTerm}
          method: get
          cors: true
          authorizer: service-authorizer
          documentation:
            summary: "Search customer"
            description: "Search specified customers by text query"
            tags:
              - "Customers"
            requestHeaders:
              - name: "Authorization"
                description: "Auth credentials"
            pathParams:
              - name: "queryTerm"
                description: "The text you want to search on customer's attributes"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "This is how the response body looks like"
                responseModels:
                  "application/json": "SuccessResponse"
              - statusCode: "400"
                responseModels:
                  "application/json": "ErrorResponse"
  
  # Internal services
  service-authorizer:
    handler: src/services/authorizer.handler

  service-logs-list:
    handler: src/endpoints/logs/list/index.handler
    events:
      - http:
          path: logs
          method: get
          cors: true
          authorizer: service-authorizer
  
  service-logs-get:
    handler: src/endpoints/logs/get/index.handler
    events:
      - http:
          path: logs/{endpointName}
          method: get
          cors: true
          authorizer: service-authorizer

resources:
  Resources:
    customersTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:provider.environment.CUSTOMERS_TABLE}
        AttributeDefinitions:
          - AttributeName: customerId
            AttributeType: S
        KeySchema:
          - AttributeName: customerId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    
    customersProfileTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:provider.environment.CUSTOMERS_PROFILES_TABLE}
        AttributeDefinitions:
          - AttributeName: customerId
            AttributeType: S
        KeySchema:
          - AttributeName: customerId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
